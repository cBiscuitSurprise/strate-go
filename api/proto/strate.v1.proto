syntax = "proto3";
package stratego.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/cBiscuitSurprise/strate-go/api/go/strategopb";

service StrateGo {
  // #region Health
  rpc Ping(google.protobuf.Empty) returns (Pong) {}
  rpc DeepPing(google.protobuf.Empty) returns (Pong) {}
  rpc LongPing(stream LongPingRequest) returns (stream Pong) {}
  // #endregion Health
  
  // #region Game
  rpc NewGame(NewGameRequest) returns (NewGameResponse) {}
  rpc ListGames(ListGamesRequest) returns (ListGamesResponse) {}
  rpc GetGame(GetGameRequest) returns (GetGameResponse) {}
  rpc PlanGame(stream PlanGameRequest) returns (stream PlanGameResponse) {}
  rpc PlayGame(stream PlayGameRequest) returns (stream PlayGameResponse) {}
  rpc PlayGameWeb(PlayGameRequest) returns (PlayGameWebResponse) {}
  rpc PlayGameWebListener(PlayGameWebListenerRequest) returns (stream PlayGameResponse) {}
  // #endregion Game
}

// #region Health
message LongPingRequest {
  string message = 1;
}

message Pong {
  google.protobuf.Timestamp timestamp = 1;
  string message = 2;
  repeated Game games = 16;
}
// #endregion Health

// #region Player
enum PlayerColor {
  PlayerColor_RED = 0;
  PlayerColor_BLUE = 1;
}

message GamePlayer {
  string id = 1;
  PlayerColor color = 2;
}
// #endregion Player

// #region Game
enum GameState {
  GameState_SETUP = 0;  // find partner, pick sides
  GameState_PLAN = 1;   // place pieces
  GameState_PLAY = 2;   // play game
  GameState_END = 3;    // game is over
  GameState_ERROR = 90;    // game has errored
}

message GameInfo {
  string id = 1;
  GameState state = 2;
  repeated string player_ids = 3;
  uint32 nonce = 4;
}

message Game {
  string id = 1;
  GameState state = 2;
  repeated string player_ids = 3;
  uint32 nonce = 4;
  Board board = 5;
}

message NewGameRequest {}

message NewGameResponse {
  Game game = 1;
}

message ListGamesRequest {}

message ListGamesResponse {
  repeated GameInfo games = 1;
}

message GetGameRequest {
  string gameId = 1;
}

message GetGameResponse {
  Game game = 1;
}

message History {
  GameState mode = 1;
  string selectedPieceId = 2;
  Position to = 3;
  optional string capturedPieceId = 4;
}

enum AttackResult {
  AttackResult_NO_CONTEST = 0;  // find partner, pick sides
  AttackResult_ATTACKEE_CAPTURED = 1;   // place pieces
  AttackResult_ATTACKER_CAPTURED = 2;   // play game
  AttackResult_BOTH_CAPTURED = 3;    // game is over
}

message AttackEvent {
  int32 attackerRank = 1;
  int32 attackeeRank = 2;
  AttackResult result = 3;
}

message PieceMovedEvent {
  uint32 nonce = 1;
  string pieceId = 2;
  Position from = 3;
  Position to = 4;
  AttackEvent pieceAttacked = 5;
}

enum PlanGameRequestCommand {
  PlanGameRequestCommand_PICK_PIECE = 0;
  PlanGameRequestCommand_PLACE_PIECE = 1;
  PlanGameRequestCommand_UNDO = 2;
  PlanGameRequestCommand_REDO = 3;
  PlanGameRequestCommand_RESET = 100;
  PlanGameRequestCommand_READY = 200;
}

message PlanGameRequest {
  string gameId = 1;
  PlanGameRequestCommand command = 2;
  optional string selectedPieceId = 3;
  optional Position selectedPosition = 4;
}

message PlanGameResponse {
  uint32 nonce = 1;
  repeated Position validPlacements = 2;
  repeated History history = 3;

  string error = 16;
}

enum PlayGameRequestCommand {
  PlayGameRequestCommand_PICK_PIECE = 0;
  PlayGameRequestCommand_MOVE_PIECE = 1;
  PlayGameRequestCommand_FOREFEIT = 2;
}

message PlayGameRequest {
  string gameId = 1;
  PlayGameRequestCommand command = 2;
  optional Position selectedPiecePosition = 3;
  optional Position selectedPlacement = 4;
}

message PlayGameResponse {
  bool redPlayerActive = 2;
  repeated Position validPlacements = 3;
  PieceMovedEvent pieceMoved = 4;
  
  string error = 16;
}

message PlayGameWebResponse {
  string gameId = 1;
  string error = 2;
}

message PlayGameWebListenerRequest {
  string gameId = 1;
}
// #endregion Game

// #region Board
message Position {
  uint32 row = 1;
  uint32 column = 2;
}

message Piece {
  string id = 1;
  uint32 rank = 2;
  GamePlayer player = 3;
}

message Square {
  string id = 1;
	optional Piece piece = 2;
	bool playable = 3;
}

message Board {
  string id = 1;
  uint32 num_rows = 2;
  uint32 num_columns = 3;
  repeated Row rows = 4;
}

message Row {
  repeated Square columns = 1;
}
// #endregion Board
